#jinja2: lstrip_blocks: True
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Worker nodes for the EKS cluster
Parameters:
  NetworkStackName:
    Type: String
  NodeImageIdSSMParam:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/eks/optimized-ami/1.14/amazon-linux-2/recommended/image_id
    Description: AWS Systems Manager Parameter Store parameter of the AMI ID for the worker node instances.

Resources:
  NodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy" #This policy allows Amazon EKS worker nodes to connect to Amazon EKS Clusters.
        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy" #This policy provides the Amazon VPC CNI Plugin (amazon-vpc-cni-k8s) the permissions it requires to modify the IP address configuration on your EKS worker nodes
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly" #Provides read-only access to Amazon EC2 Container Registry repositories.
      Path: /

  NodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - Ref: NodeInstanceRole

  NodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      Tags:
        - Key: kubernetes.io/cluster/{{ clusterName }}
          Value: owned
      VpcId:
        !ImportValue
          !Sub "${NetworkStackName}-VPCID"
# ingress/egress rules for security group
{{ lookup('file', 'files/security-group-rules.yml') }}

  NodeLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: "true"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 20
            VolumeType: gp2
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !Ref NodeImageIdSSMParam
      InstanceType: t2.micro
      KeyName:  k8sNodeInstance
      SecurityGroups:
        - Ref: NodeSecurityGroup
      UserData: !Base64
        "Fn::Sub": |
          #!/bin/bash
          set -o xtrace
          /etc/eks/bootstrap.sh {{ clusterName  }}
          /opt/aws/bin/cfn-signal --exit-code $? \
                   --stack  ${AWS::StackName} \
                   --resource NodeGroup  \
                   --region ${AWS::Region}

  NodeGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      DesiredCapacity: 2
      LaunchConfigurationName: !Ref NodeLaunchConfig
      MaxSize: 3
      MinSize: 1
      Tags:
        - Key: Name
          PropagateAtLaunch: "true"
          Value: {{ clusterName }}-{{ nodeGroupName }}-Node
        - Key: kubernetes.io/cluster/{{ clusterName }}
          PropagateAtLaunch: "true"
          Value: owned
      VPCZoneIdentifier:
        Fn::Split:
              - ","
              - Fn::ImportValue:
                    Fn::Sub: ${NetworkStackName}-SUBNETS
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: "1"
        MinInstancesInService: 2
        PauseTime: PT5M

Outputs:
  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt NodeInstanceRole.Arn
