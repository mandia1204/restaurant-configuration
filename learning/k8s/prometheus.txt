https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml
https://github.com/prometheus/alertmanager/blob/master/template/default.tmpl
https://github.com/giantswarm/kubernetes-prometheus/blob/master/manifests-all.yaml


querying:
=========
https://prometheus.io/docs/prometheus/latest/querying/basics/

kube_deployment_status_replicas{deployment="security-app"}
count(kube_deployment_status_replicas)
rate(http_requests_total{job="kubernetes-apiservers"}[15m])
changes(http_requests_total{job="kubernetes-apiservers"}[5m])
kube_node_status_condition {condition="OutOfDisk"}
kube_pod_status_phase{phase="Failed"}
kube_pod_container_status_restarts_total

cpu:
sum(rate(container_cpu_usage_seconds_total[5m])) by (container_name)
rate(container_cpu_usage_seconds_total{container_name="res-dashboard-fe"}[5m])  * 100
sum(
    rate(container_cpu_cfs_throttled_seconds_total[5m]))
by (container_name)

memory:

https://blog.freshtracks.io/a-deep-dive-into-kubernetes-metrics-part-3-container-resource-metrics-361c5ee46e66

flow for node-exporter:
=======================

1 configure prometheus using kubernetes_sd_configs plugin with role: endpoints
  1.1 it will discover labels for all endpoints in k8s
  1.2 it will filter endpoints that don't match the condition in - action: keep, for example, having this config:
      - action: keep
          regex: true
          source_labels:
          - __meta_kubernetes_service_annotation_prometheus_io_scrape
    endpoints that doesn't have the lavel __meta_kubernetes_service_annotation_prometheus_io_scrape = true will be discarted.
  1.3 for each matched endpoint, it will:
    1.3.1 add neccesary labels to the matched endpoints in order to make them unique.
    1.3.2 define the url to scrape the metrics.
2 install node-exporter as daemonset, it will expose metrics in https://node-ip/metrics
3 prometheus will scrape the exposed url to ge the timeseries data and store it. the metric will have the labels defined in 1.3.1

